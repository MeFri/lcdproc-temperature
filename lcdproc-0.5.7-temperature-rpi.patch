diff -ur --new-file ./clients/lcdproc/lcdproc.conf ./clients/lcdproc/lcdproc.conf
--- ./clients/lcdproc/lcdproc.conf	2009-05-19 08:44:46.000000000 +0200
+++ ./clients/lcdproc/lcdproc.conf	2015-12-07 17:30:00.382842637 +0100
@@ -141,5 +141,7 @@
 # time format [default: %H:%M; legal: see strftime(3)]
 TimeFormat="%H:%M"
 
+[Total]
+Active=false
 
 # EOF
diff -ur --new-file ./clients/lcdproc/machine.h ./clients/lcdproc/machine.h
--- ./clients/lcdproc/machine.h	2012-08-19 16:29:07.000000000 +0200
+++ ./clients/lcdproc/machine.h	2015-12-07 17:30:00.382842637 +0100
@@ -205,4 +205,8 @@
 int machine_get_iface_stats(IfaceInfo *interface);
 
 
+/**
+  Get the temperature
+  */
+int machine_get_temp(double* temp);
 #endif /* _lcdproc_machine_h_ */
diff -ur --new-file ./clients/lcdproc/machine_Linux.c ./clients/lcdproc/machine_Linux.c
--- ./clients/lcdproc/machine_Linux.c	2012-08-19 16:29:07.000000000 +0200
+++ ./clients/lcdproc/machine_Linux.c	2015-12-07 17:30:00.382842637 +0100
@@ -628,4 +628,22 @@
 	}
 }
 
+int
+machine_get_temp(double *temp)
+{
+    FILE *file;		/* file handler */
+    char buffer[1024];	/* buffer to work with the file */
+    if ((file = fopen("/sys/class/thermal/thermal_zone0/temp", "r")) != NULL) {
+        fgets(buffer, sizeof(buffer), file);
+        sscanf(buffer, "%lf", temp);
+        *temp /= 1000;
+        fclose(file);
+        return (TRUE);
+    }
+    else {        /* error when opening the file */
+        perror("Error: Could not open DEVFILE");
+        return (FALSE);
+    }
+}
+
 #endif				/* linux */
diff -ur --new-file ./clients/lcdproc/main.c ./clients/lcdproc/main.c
--- ./clients/lcdproc/main.c	2012-08-19 16:29:07.000000000 +0200
+++ ./clients/lcdproc/main.c	2015-12-07 17:30:00.392842637 +0100
@@ -41,6 +41,7 @@
 
 /* Import screens */
 #include "batt.h"
+#include "total.h"
 #include "chrono.h"
 #include "cpu.h"
 #include "cpu_smp.h"
@@ -111,6 +112,7 @@
 	{ "ProcSize",  'S',  16,  256, 1, 0xffff, 0,      mem_top_screen    },	// [S]ize of biggest processes
 	{ "Disk",      'D', 256,  256, 1, 0xffff, 0,      disk_screen       },	// [D]isk stats
 	{ "MiniClock", 'N',   4,   64, 0, 0xffff, 0,      mini_clock_screen },	// Mi[n]i clock
+        { "Total",     'Z',   1,    2, 0, 0xffff, 0,      total_screen      },  // Total Combination Graph [Z]
 	{  NULL, 0, 0, 0, 0, 0, 0, NULL},			  	// No more..  all done.
 };
 
diff -ur --new-file ./clients/lcdproc/Makefile.am ./clients/lcdproc/Makefile.am
--- ./clients/lcdproc/Makefile.am	2009-06-07 16:18:19.000000000 +0200
+++ ./clients/lcdproc/Makefile.am	2015-12-07 17:30:00.392842637 +0100
@@ -4,7 +4,7 @@
 
 bin_PROGRAMS = lcdproc
 
-lcdproc_SOURCES = main.c main.h mode.c mode.h batt.c batt.h chrono.c chrono.h cpu.c cpu.h cpu_smp.c cpu_smp.h disk.c disk.h load.c load.h mem.c mem.h eyebox.c eyebox.h machine.h machine_Linux.c machine_OpenBSD.c machine_FreeBSD.c machine_NetBSD.c machine_Darwin.c machine_SunOS.c util.c util.h iface.c iface.h
+lcdproc_SOURCES = main.c main.h mode.c mode.h batt.c batt.h chrono.c chrono.h cpu.c cpu.h cpu_smp.c cpu_smp.h disk.c disk.h load.c load.h mem.c mem.h eyebox.c eyebox.h machine.h machine_Linux.c machine_OpenBSD.c machine_FreeBSD.c machine_NetBSD.c machine_Darwin.c machine_SunOS.c util.c util.h iface.c iface.h total.c total.h
 
 lcdproc_LDADD = ../../shared/libLCDstuff.a
 
diff -ur --new-file ./clients/lcdproc/total.c ./clients/lcdproc/total.c
--- ./clients/lcdproc/total.c	1970-01-01 01:00:00.000000000 +0100
+++ ./clients/lcdproc/total.c	2015-12-07 17:29:23.592841956 +0100
@@ -0,0 +1,177 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#ifdef IRIX
+#include <strings.h>
+#endif
+#include <unistd.h>
+#include <fcntl.h>
+#include <ctype.h>
+#include <dirent.h>
+
+#include "shared/sockets.h"
+#include "shared/LL.h"
+
+#include "main.h"
+#include "mode.h"
+#include "machine.h"
+#include "total.h"
+#include "util.h"
+
+/////////////////////////////////////////////////////////////////////////
+// Total Screen displays info about CPU, memory and swap usage... 20x4
+//
+// +--------------------+
+// |### CPU #### MEM ##@|
+// |----|----|----|----||
+// |%[-----------------]|
+// |E-------F  T: XX°C  |
+// +--------------------+
+//
+
+int total_screen(int rep, int display, int *flags_ptr)
+{
+    #undef CPU_BUF_SIZE
+    #define CPU_BUF_SIZE 4
+    int z;
+    static float cpu[MAX_CPUS][CPU_BUF_SIZE + 1];	// last buffer is scratch
+    load_type load[MAX_CPUS];
+    int num_cpus = MAX_CPUS;
+    int bar_size;
+    int lines_used;
+    double temperature;
+
+    // CPU Total
+    static double cpu2[CPU_BUF_SIZE + 1][5];	// last buffer is scratch
+    static int gauge_wid2 = 0;
+    load_type load2;
+    int n,i,j;
+    double value;
+
+    // Mem
+    static int gauge_wid = 0;
+    meminfo_type mem[2];
+
+    // get SMP load - inform about max #CPUs allowed
+    machine_get_smpload(load, &num_cpus);
+
+    // 4 CPUs / Line, 2 Lines
+    bar_size = 4;
+    lines_used = 2;
+
+    // Intitialisierung
+    if ((*flags_ptr & INITIALIZED) == 0)
+    {
+        *flags_ptr |= INITIALIZED;
+
+        sock_send_string(sock, "screen_add Z\n");
+
+        sock_send_string(sock, "widget_add Z title title\n");
+        sock_printf(sock, "widget_set Z title {CPU MEM %s}\n", get_hostname());
+
+        sock_printf(sock, "screen_set Z -name {CPU Use: %s}\n", get_hostname());
+
+        // CPU Part
+        for (z = 0; z < num_cpus; z++)
+        {
+            int y_offs = 2;
+            int x = (z % 4) * (lcd_wid/4) + 1;
+            int y = z/4 + y_offs;
+
+            sock_printf(sock, "widget_add Z cpu%d_title string\n", z);
+            sock_printf(sock, "widget_set Z cpu%d_title %d %d \"%*s|\"\n",z, x, y, bar_size, "");
+            sock_printf(sock, "widget_add Z cpu%d_bar hbar\n", z);
+        }
+
+        // CPU Total
+        gauge_wid2 = lcd_wid - 6;
+        sock_send_string(sock, "widget_add Z three string\n");
+        sock_printf(sock, "widget_set Z three 1 3 {0%%%*s100%%}\n", gauge_wid2, "");
+        sock_send_string(sock, "widget_add Z bar hbar\n");
+        sock_send_string(sock, "widget_set Z bar 3 3 0\n");
+
+        // Memory Part
+        gauge_wid = (lcd_wid - 6) / 2;
+        sock_send_string(sock, "widget_add Z EFmem string\n");
+        sock_printf(sock, "widget_set Z EFmem 1 4 {E%*sF}\n", gauge_wid, "");
+        sock_send_string(sock, "widget_add Z memgauge hbar\n");
+        sock_send_string(sock, "widget_add Z Temp string\n");
+        sock_printf(sock, "widget_set Z Temp %i 4 {T: Unkn°C}\n", lcd_wid - gauge_wid - 1);
+
+        return 0;
+    }
+
+    // CPU Part
+    for (z = 0; z < num_cpus; z++)
+    {
+        int y_offs = 2;
+        int x = (z % 4) * (lcd_wid/4) + 1;
+        int y = z/4 + y_offs;
+        float value = 0.0;
+        int i, n;
+
+        // Shift values over by one
+        for (i = 0; i < (CPU_BUF_SIZE - 1); i++)
+                cpu[z][i] = cpu[z][i + 1];
+
+        // Read new data
+        cpu[z][CPU_BUF_SIZE-1] = (load[z].total > 0L) ? (((float) load[z].user + (float) load[z].system + (float) load[z].nice) / (float) load[z].total) * 100.0 : 0.0;
+
+        // Average values for final result
+        for (i = 0; i < CPU_BUF_SIZE; i++)
+        {
+            value += cpu[z][i];
+        }
+        value /= CPU_BUF_SIZE;
+
+        n = (int) ((value * lcd_cellwid * bar_size) / 100.0 + 0.5);
+        sock_printf(sock, "widget_set Z cpu%d_bar %d %d %d\n", z, x, y, n);
+    }
+
+    // CPU Total Part
+    machine_get_load(&load2);
+    for (i = 0; i < (CPU_BUF_SIZE - 1); i++)
+                for (j = 0; j < 5; j++)
+                        cpu2[i][j] = cpu2[i + 1][j];
+    if (load2.total > 0L)
+    {
+        cpu2[CPU_BUF_SIZE - 1][0] = 100.0 * ((double) load2.user / (double) load2.total);
+        cpu2[CPU_BUF_SIZE - 1][1] = 100.0 * ((double) load2.system / (double) load2.total);
+        cpu2[CPU_BUF_SIZE - 1][2] = 100.0 * ((double) load2.nice / (double) load2.total);
+        cpu2[CPU_BUF_SIZE - 1][3] = 100.0 * ((double) load2.idle / (double) load2.total);
+        cpu2[CPU_BUF_SIZE - 1][4] = 100.0 * (((double) load2.user + (double) load2.system + (double) load2.nice) / (double) load2.total);
+    }
+    else
+    {
+        cpu2[CPU_BUF_SIZE - 1][0] = 0.0;
+        cpu2[CPU_BUF_SIZE - 1][1] = 0.0;
+        cpu2[CPU_BUF_SIZE - 1][2] = 0.0;
+        cpu2[CPU_BUF_SIZE - 1][3] = 0.0;
+        cpu2[CPU_BUF_SIZE - 1][4] = 0.0;
+    }
+    for (i = 0; i < 5; i++)
+    {
+        value = 0.0;
+        for (j = 0; j < CPU_BUF_SIZE; j++)
+                        value += cpu2[j][i];
+        value /= CPU_BUF_SIZE;
+        cpu2[CPU_BUF_SIZE][i] = value;
+    }
+    n = (int) ((cpu2[CPU_BUF_SIZE][4] * lcd_cellwid * gauge_wid2) / 100.0);
+    sock_printf(sock, "widget_set Z bar 3 3 %d\n", n);
+
+    // Memory Part
+    machine_get_meminfo(mem);
+    // Free memory graph
+    if (mem[0].total > 0)
+    {
+        double value = 1.0 - (double) (mem[0].free + mem[0].buffers + mem[0].cache) / (double) mem[0].total;
+        //printf(".0f", val) only prints the integer part
+        if (display)
+                sock_printf(sock, "widget_set Z memgauge 2 4 %.0f\n", lcd_cellwid * gauge_wid * value);
+    }
+
+    machine_get_temp(&temperature);
+    sock_printf(sock, "widget_set Z Temp %i 4 {T: %2.0f%cC}\n", lcd_wid - gauge_wid - 1, temperature, 0xDF);
+    return 0;
+}
diff -ur --new-file ./clients/lcdproc/total.h ./clients/lcdproc/total.h
--- ./clients/lcdproc/total.h	1970-01-01 01:00:00.000000000 +0100
+++ ./clients/lcdproc/total.h	2015-12-07 17:29:29.902842073 +0100
@@ -0,0 +1,6 @@
+#ifndef TOTAL_H
+#define TOTAL_H
+
+int total_screen(int rep, int display, int *flags_ptr);
+
+#endif
